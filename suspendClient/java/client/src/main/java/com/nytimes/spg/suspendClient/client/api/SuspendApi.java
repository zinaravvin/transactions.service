/*
 * Aristo Suspense Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nytimes.spg.suspendClient.client.api;

import com.nytimes.spg.suspendClient.client.ApiCallback;
import com.nytimes.spg.suspendClient.client.ApiClient;
import com.nytimes.spg.suspendClient.client.ApiException;
import com.nytimes.spg.suspendClient.client.ApiResponse;
import com.nytimes.spg.suspendClient.client.Configuration;
import com.nytimes.spg.suspendClient.client.Pair;
import com.nytimes.spg.suspendClient.client.ProgressRequestBody;
import com.nytimes.spg.suspendClient.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.nytimes.spg.suspendClient.client.model.CreateTempSusupenseCommand;
import com.nytimes.spg.suspendClient.client.model.GetTempSusupenseResponse;
import com.nytimes.spg.suspendClient.client.model.SuspenseErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SuspendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SuspendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SuspendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTempSuspence
     * @param accountId The account id (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request parameters bad </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Unknown URI mapping] [Error in request]  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Reauth Required </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> [Error communicating with external service] [Error communicating to Aristo] [Internal server error]  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTempSuspenceCall(String accountId, CreateTempSusupenseCommand body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/suspend/temp/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTempSuspenceValidateBeforeCall(String accountId, CreateTempSusupenseCommand body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createTempSuspence(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTempSuspence(Async)");
        }
        

        okhttp3.Call localVarCall = createTempSuspenceCall(accountId, body, _callback);
        return localVarCall;

    }

    /**
     * Create temp suspense txn
     * Availability: * Internal: Yes * External: No * Core: Yes  Overview:  Create temporary suspence transactions Headers: For internal authentication use:     1. X-NYT-LDAP, X-NYT-CLIENT-ID, X-NYT-CLIENT-SECRET (The most preferable way)     2. X-NYT-LDAP, X-NYT-AUTHORIZATION For external authentication use:     1. COOKIE, X-NYT-SARTRE-TOKEN, CONTENT-TYPE 
     * @param accountId The account id (required)
     * @param body  (required)
     * @return GetTempSusupenseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request parameters bad </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Unknown URI mapping] [Error in request]  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Reauth Required </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> [Error communicating with external service] [Error communicating to Aristo] [Internal server error]  </td><td>  -  </td></tr>
     </table>
     */
    public GetTempSusupenseResponse createTempSuspence(String accountId, CreateTempSusupenseCommand body) throws ApiException {
        ApiResponse<GetTempSusupenseResponse> localVarResp = createTempSuspenceWithHttpInfo(accountId, body);
        return localVarResp.getData();
    }

    /**
     * Create temp suspense txn
     * Availability: * Internal: Yes * External: No * Core: Yes  Overview:  Create temporary suspence transactions Headers: For internal authentication use:     1. X-NYT-LDAP, X-NYT-CLIENT-ID, X-NYT-CLIENT-SECRET (The most preferable way)     2. X-NYT-LDAP, X-NYT-AUTHORIZATION For external authentication use:     1. COOKIE, X-NYT-SARTRE-TOKEN, CONTENT-TYPE 
     * @param accountId The account id (required)
     * @param body  (required)
     * @return ApiResponse&lt;GetTempSusupenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request parameters bad </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Unknown URI mapping] [Error in request]  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Reauth Required </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> [Error communicating with external service] [Error communicating to Aristo] [Internal server error]  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTempSusupenseResponse> createTempSuspenceWithHttpInfo(String accountId, CreateTempSusupenseCommand body) throws ApiException {
        okhttp3.Call localVarCall = createTempSuspenceValidateBeforeCall(accountId, body, null);
        Type localVarReturnType = new TypeToken<GetTempSusupenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create temp suspense txn (asynchronously)
     * Availability: * Internal: Yes * External: No * Core: Yes  Overview:  Create temporary suspence transactions Headers: For internal authentication use:     1. X-NYT-LDAP, X-NYT-CLIENT-ID, X-NYT-CLIENT-SECRET (The most preferable way)     2. X-NYT-LDAP, X-NYT-AUTHORIZATION For external authentication use:     1. COOKIE, X-NYT-SARTRE-TOKEN, CONTENT-TYPE 
     * @param accountId The account id (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request parameters bad </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Unknown URI mapping] [Error in request]  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Reauth Required </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> [Error communicating with external service] [Error communicating to Aristo] [Internal server error]  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTempSuspenceAsync(String accountId, CreateTempSusupenseCommand body, final ApiCallback<GetTempSusupenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTempSuspenceValidateBeforeCall(accountId, body, _callback);
        Type localVarReturnType = new TypeToken<GetTempSusupenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
