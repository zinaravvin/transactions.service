buildscript {
	repositories {
		mavenLocal()
		maven { url "https://repo1.maven.org/maven2" }
		// or, via Gradle Plugin Portal:
		// url "https://plugins.gradle.org/m2/"
	}
	dependencies {
		classpath "org.openapitools:openapi-generator-gradle-plugin:6.0.0"
		classpath 'no.nils:wsdl2java:0.10'
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.flywaydb.flyway" version "8.3.0"
	id "org.openapi.generator" version "6.0.0"
	id "io.mateo.cxf-codegen" version "1.0.0-rc.3"



}
apply plugin: 'org.openapi.generator'
apply plugin: "org.flywaydb.flyway"




group = 'com.transactions'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	cxfCodegen "jakarta.xml.ws:jakarta.xml.ws-api:2.3.3"
	cxfCodegen "jakarta.annotation:jakarta.annotation-api:1.3.5"
	implementation 'javax.jws:javax.jws-api:1.1'
	implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
	implementation 'com.sun.xml.bind:jaxb-xjc:2.3.0.1'
	implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'javax.xml.ws:jaxws-api:2.3.1'
	implementation 'org.apache.cxf:cxf-rt-wsdl:3.2.7'
	implementation 'javax.jws:javax.jws-api:1.1'
	implementation group: 'org.apache.cxf', name: 'cxf-codegen-plugin', version: '3.5.3'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
	implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
	//implementation group: 'io.swagger', name: 'swagger-annotations', version: '2.0.0-rc2'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: 'r05'
	// https://mvnrepository.com/artifact/com.sun.xml.ws/jaxws-rt
	implementation 'com.sun.xml.ws:jaxws-rt:2.3.2'
	implementation 'com.sun.xml.ws:rt:2.3.2'
	implementation 'com.sun.xml.ws:jaxws-ri:2.3.2'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
// https://mvnrepository.com/artifact/io.swagger/swagger-annotations
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.5.0'
	// https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

	compileOnly 'org.projectlombok:lombok'
	//runtimeOnly 'io.micrometer:micrometer-registry-datadog'
	//runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
}

def dbSettings = {
	it.url = System.getProperty('db.url', 'jdbc:postgresql://localhost:5432/postgres')
	it.user = System.getProperty('db.username', 'postgres')
	it.password = System.getProperty('db.password', 'postgres')
}
 flyway {
	dbSettings(it)
	outOfOrder = true // This is needed when doing branch based development
	locations = ['filesystem:database/sql']
	baselineVersion = 0.3 // only needed for first run to baseline the current schema
	baselineOnMigrate = true // only needed for first run to baseline the current schema
}
flywayMigrate.dependsOn flywayInfo
bootRun.dependsOn flywayMigrate
tasks.named('test') {
	useJUnitPlatform()
}
openApiValidate {
	inputSpec = "$rootDir/src/main/resources/swagger.yml"
	recommend = true
}
/*def generateJavaClientTask(name, specfile){
	String packageName = name.capitalize()
	return tasks.create("generate${packageName}JavaClient", org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
		inputSpec = "$rootDir/src/main/resources/swagger.yml".toString()
		generatorName = "java"
		outputDir = "${projectDir}/${name}/java/client"
		modelPackage = "com.nytimes.spg.${name}.client.model"
		apiPackage = "com.nytimes.spg.${name}.client.api"
		configOptions = [
				dateLibrary: "java8"
		]
	}
}*/

//Task javaClientTask = generateJavaClientTask("suspendClient", "swagger.yml")
//tasks.build.dependsOn(javaClientTask)

/*def generateJavaServerStubTask(name, specfile){
	String packageName = name.capitalize()
	return tasks.create("generate${packageName}JavaServerStub", org.openapitools.generator.gradle.plugin.tasks.GenerateTask){

		inputSpec = "$rootDir/src/main/resources/swagger.yml".toString()
		generatorName = "spring"
		outputDir = "${projectDir}/src/main/java/com/server"
		modelPackage = "com.txn-service.server.model"
		apiPackage = "com.txn-service.server.api"
		invokerPackage = "com.txn-service.server"
		configOptions = [
				interfaceOnly: "true",
				//models: "none",
				generateSupportingFiles: "false",
				configPackage: "com.txn-service.server.config",
				skipDefaultInterface: "true",
				dateLibrary: "java8"
		]

	}
}*/
Task javaServerStubTask = generateJavaServerStubTask("txnserver", "swagger.yml")
tasks.build.dependsOn(javaServerStubTask)

cxfCodegen {
	wsdl2java {
		example {
			wsdl = file("${projectDir}/src/main/resources/wsdl/HDWBINFO.xml")
			outputDir = file("${projectDir}/src/main/java/com/aristoClient")
			markGenerated = true
		}
		example {
			wsdl = file("${projectDir}/src/main/resources/wsdl/HDWBROUT.xml")
			outputDir = file("${projectDir}/src/main/java/com/aristoClient")
			markGenerated = true
		}
	}
}

compileJava.dependsOn wsdl2java